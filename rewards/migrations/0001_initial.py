# Generated by Django 4.2.7 on 2025-09-10 18:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RewardItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('item_type', models.CharField(choices=[('discount', 'Event Discount'), ('badge', 'Special Badge'), ('avatar', 'Avatar Item'), ('certificate', 'Certificate'), ('merchandise', 'Eco Merchandise'), ('donation', 'Environmental Donation'), ('tree_planting', 'Tree Planting'), ('other', 'Other Reward')], max_length=20)),
                ('cost_tokens', models.PositiveIntegerField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='rewards/')),
                ('is_active', models.BooleanField(default=True)),
                ('stock_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('max_per_user', models.PositiveIntegerField(default=1)),
                ('min_level_required', models.PositiveIntegerField(default=1)),
                ('school_type_restriction', models.CharField(blank=True, choices=[('elementary', 'Elementary School'), ('middle', 'Middle School'), ('high', 'High School'), ('college', 'College/University')], help_text='Leave blank for no restriction', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['cost_tokens', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TokenEarningRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.CharField(choices=[('quiz_completion', 'Quiz Completed'), ('quiz_perfect', 'Perfect Quiz Score'), ('task_completion', 'Eco-Task Completed'), ('daily_login', 'Daily Login'), ('streak_bonus', 'Streak Bonus'), ('level_up', 'Level Up Bonus'), ('achievement', 'Achievement Unlocked'), ('referral', 'Friend Referral'), ('event_participation', 'Event Participation'), ('other', 'Other')], max_length=30, unique=True)),
                ('base_tokens', models.PositiveIntegerField()),
                ('bonus_multiplier', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('streak_required', models.PositiveIntegerField(default=0, help_text='Days streak required for bonus')),
                ('level_multiplier', models.BooleanField(default=False, help_text='Multiply by user level')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tokens_spent', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('delivery_info', models.JSONField(blank=True, default=dict)),
                ('redemption_code', models.CharField(blank=True, max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('reward_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rewards.rewarditem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.CreateModel(
            name='EcoTokenTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earned', 'Tokens Earned'), ('spent', 'Tokens Spent'), ('bonus', 'Bonus Tokens'), ('penalty', 'Penalty'), ('gift', 'Gift from User'), ('admin', 'Admin Adjustment')], max_length=20)),
                ('source', models.CharField(blank=True, choices=[('quiz_completion', 'Quiz Completed'), ('quiz_perfect', 'Perfect Quiz Score'), ('task_completion', 'Eco-Task Completed'), ('daily_login', 'Daily Login'), ('streak_bonus', 'Streak Bonus'), ('level_up', 'Level Up Bonus'), ('achievement', 'Achievement Unlocked'), ('referral', 'Friend Referral'), ('event_participation', 'Event Participation'), ('other', 'Other')], max_length=30)),
                ('amount', models.IntegerField()),
                ('description', models.CharField(max_length=200)),
                ('quiz_id', models.PositiveIntegerField(blank=True, null=True)),
                ('task_id', models.PositiveIntegerField(blank=True, null=True)),
                ('achievement_id', models.PositiveIntegerField(blank=True, null=True)),
                ('balance_after', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DailyTokenLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('tokens_earned_today', models.PositiveIntegerField(default=0)),
                ('max_daily_tokens', models.PositiveIntegerField(default=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'date')},
            },
        ),
    ]
