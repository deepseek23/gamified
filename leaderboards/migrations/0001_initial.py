# Generated by Django 4.2.7 on 2025-09-10 18:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LeaderboardSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('season_type', models.CharField(choices=[('spring', 'Spring Challenge'), ('summer', 'Summer Challenge'), ('fall', 'Fall Challenge'), ('winter', 'Winter Challenge'), ('earth_day', 'Earth Day Special'), ('environment_week', 'Environment Week'), ('custom', 'Custom Event')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('bonus_multiplier', models.FloatField(default=1.0)),
                ('featured_activities', models.JSONField(blank=True, default=list)),
                ('winner_tokens', models.PositiveIntegerField(default=500)),
                ('winner_badge', models.CharField(blank=True, max_length=100)),
                ('participation_tokens', models.PositiveIntegerField(default=50)),
                ('theme_color', models.CharField(default='#28a745', max_length=7)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='season_banners/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('scope', models.CharField(choices=[('global', 'Global'), ('country', 'Country'), ('city', 'City'), ('school', 'School'), ('grade', 'Grade Level')], max_length=20)),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('all_time', 'All Time')], max_length=20)),
                ('metric', models.CharField(choices=[('total_tokens', 'Total Eco-Tokens'), ('level', 'User Level'), ('quiz_score', 'Average Quiz Score'), ('tasks_completed', 'Tasks Completed'), ('streak_days', 'Current Streak'), ('longest_streak', 'Longest Streak'), ('quizzes_completed', 'Quizzes Completed')], max_length=30)),
                ('icon', models.CharField(default='üèÜ', max_length=50)),
                ('color', models.CharField(default='#ffd700', max_length=7)),
                ('max_entries', models.PositiveIntegerField(default=100)),
                ('school_type_filter', models.CharField(blank=True, choices=[('elementary', 'Elementary School'), ('middle', 'Middle School'), ('high', 'High School'), ('college', 'College/University')], help_text='Leave blank for no filter', max_length=20)),
                ('min_level', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['scope', 'period', 'metric'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_rank', models.PositiveIntegerField(default=1)),
                ('max_rank', models.PositiveIntegerField(default=1)),
                ('token_reward', models.PositiveIntegerField(default=0)),
                ('experience_reward', models.PositiveIntegerField(default=0)),
                ('badge_name', models.CharField(blank=True, max_length=100)),
                ('badge_icon', models.CharField(blank=True, max_length=50)),
                ('special_title', models.CharField(blank=True, max_length=100)),
                ('custom_avatar_frame', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('leaderboard_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='leaderboards.leaderboardtype')),
            ],
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('score', models.FloatField()),
                ('previous_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leaderboard_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='leaderboards.leaderboardtype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['leaderboard_type', 'rank'],
                'unique_together': {('leaderboard_type', 'user', 'period_start')},
            },
        ),
        migrations.CreateModel(
            name='GlobalLeaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('global_rank', models.PositiveIntegerField()),
                ('total_score', models.FloatField()),
                ('tokens_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('level_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('quiz_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('task_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('total_achievements', models.PositiveIntegerField(default=0)),
                ('rare_achievements', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='global_rankings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['global_rank'],
            },
        ),
        migrations.CreateModel(
            name='UserLeaderboardReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tokens_awarded', models.PositiveIntegerField()),
                ('experience_awarded', models.PositiveIntegerField()),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('leaderboard_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leaderboards.leaderboardentry')),
                ('leaderboard_reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leaderboards.leaderboardreward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'leaderboard_reward', 'leaderboard_entry')},
            },
        ),
        migrations.CreateModel(
            name='SeasonParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_score', models.FloatField(default=0.0)),
                ('season_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('quizzes_completed', models.PositiveIntegerField(default=0)),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('tokens_earned', models.PositiveIntegerField(default=0)),
                ('rewards_claimed', models.BooleanField(default=False)),
                ('final_tokens_awarded', models.PositiveIntegerField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='leaderboards.leaderboardseason')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['season', 'season_rank'],
                'unique_together': {('user', 'season')},
            },
        ),
        migrations.CreateModel(
            name='LocalLeaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_type', models.CharField(choices=[('country', 'Country'), ('city', 'City'), ('school', 'School')], max_length=20)),
                ('location_value', models.CharField(max_length=200)),
                ('rank', models.PositiveIntegerField()),
                ('score', models.FloatField()),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('all_time', 'All Time')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='local_rankings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['location_type', 'location_value', 'rank'],
                'unique_together': {('location_type', 'location_value', 'user', 'period_type', 'period_start')},
            },
        ),
    ]
