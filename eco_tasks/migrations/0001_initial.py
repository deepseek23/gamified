# Generated by Django 4.2.7 on 2025-09-10 18:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EcoTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=20)),
                ('task_type', models.CharField(choices=[('individual', 'Individual Task'), ('group', 'Group Task'), ('family', 'Family Task'), ('school', 'School-wide Task'), ('community', 'Community Task')], max_length=20)),
                ('instructions', models.TextField()),
                ('materials_needed', models.TextField(blank=True)),
                ('estimated_time_minutes', models.PositiveIntegerField()),
                ('verification_method', models.CharField(choices=[('photo', 'Photo Upload'), ('video', 'Video Upload'), ('text', 'Text Description'), ('checklist', 'Checklist'), ('quiz', 'Mini Quiz'), ('peer_review', 'Peer Review')], max_length=20)),
                ('verification_instructions', models.TextField()),
                ('requires_approval', models.BooleanField(default=True)),
                ('base_tokens_reward', models.PositiveIntegerField(default=15)),
                ('experience_points', models.PositiveIntegerField(default=10)),
                ('min_level_required', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='task_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'difficulty', 'title'],
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='üåç', max_length=50)),
                ('color', models.CharField(default='#28a745', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Task Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaskChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('weekly', 'Weekly Challenge'), ('monthly', 'Monthly Challenge'), ('seasonal', 'Seasonal Challenge'), ('special', 'Special Event')], max_length=20)),
                ('min_tasks_to_complete', models.PositiveIntegerField(default=1)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('bonus_tokens', models.PositiveIntegerField(default=50)),
                ('bonus_experience', models.PositiveIntegerField(default=25)),
                ('badge_name', models.CharField(blank=True, max_length=100)),
                ('badge_icon', models.CharField(default='üèÜ', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('required_tasks', models.ManyToManyField(related_name='challenges', to='eco_tasks.ecotask')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('submitted', 'Submitted for Review'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='not_started', max_length=20)),
                ('submission_text', models.TextField(blank=True)),
                ('submission_image', models.ImageField(blank=True, null=True, upload_to='task_submissions/')),
                ('submission_video', models.FileField(blank=True, null=True, upload_to='task_videos/')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('tokens_earned', models.PositiveIntegerField(default=0)),
                ('experience_gained', models.PositiveIntegerField(default=0)),
                ('reviewer_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_tasks', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_attempts', to='eco_tasks.ecotask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eco_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'task')},
            },
        ),
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('template_instructions', models.TextField()),
                ('template_materials', models.TextField(blank=True)),
                ('template_verification', models.TextField()),
                ('default_tokens', models.PositiveIntegerField(default=15)),
                ('default_experience', models.PositiveIntegerField(default=10)),
                ('default_time_minutes', models.PositiveIntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eco_tasks.taskcategory')),
            ],
        ),
        migrations.CreateModel(
            name='TaskSubmissionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_text', models.CharField(max_length=500)),
                ('is_completed', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='task_item_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_items', to='eco_tasks.usertask')),
            ],
        ),
        migrations.AddField(
            model_name='ecotask',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='eco_tasks.taskcategory'),
        ),
        migrations.AddField(
            model_name='ecotask',
            name='prerequisite_tasks',
            field=models.ManyToManyField(blank=True, to='eco_tasks.ecotask'),
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('joined', 'Joined'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='joined', max_length=20)),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('tokens_earned', models.PositiveIntegerField(default=0)),
                ('experience_gained', models.PositiveIntegerField(default=0)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='eco_tasks.taskchallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'challenge')},
            },
        ),
    ]
